class TrieNode:
    def __init__(self):
        self.is_word = False
        self.children = {}

class PrefixTree:

    def __init__(self):
        self.trie_root = TrieNode()

    def insert(self, word: str) -> None:
        # Start from root, and check letter by letter in word
        curr_node = self.trie_root
        for letter in word:
            if letter not in curr_node.children: #insert
                curr_node.children[letter] = TrieNode() 
            curr_node = curr_node.children[letter]
        # @end, mark this as a word
        curr_node.is_word = True

    def search(self, word: str) -> bool:
        curr_node = self.trie_root
        for letter in word:
            if letter not in curr_node.children:
                return False
            curr_node = curr_node.children[letter]
        return curr_node.is_word
        
    def startsWith(self, prefix: str) -> bool:
        curr_node = self.trie_root
        for letter in prefix:
            if letter not in curr_node.children:
                return False
            curr_node = curr_node.children[letter]
        return True
